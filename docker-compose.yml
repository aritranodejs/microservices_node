version: "3.8"

services:
  # ---------------------------- USER SERVICE ----------------------------
  user-service:
    build: ./user-service
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - DB_CONNECTION_URL=mongodb://user-db:27017/user-service
    volumes:
      - ./shared:/app/shared
    networks:
      - microservices-network
    depends_on:
      user-db:
        condition: service_healthy
      user-migrations:
        condition: service_completed_successfully
    command: ["node", "src/index.js"]  # Start service after migrations

  user-db:
    image: mongo:5.0
    container_name: user-db
    ports:
      - "27018:27017"
    networks:
      - microservices-network
    volumes:
      - user-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-migrations:
    build: ./user-service
    entrypoint: ["/bin/sh", "-c", "npx migrate-mongo up || echo 'No new migrations to apply'"]
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: "no"  # Run only once and exit

  # ---------------------------- PRODUCT SERVICE ----------------------------
  product-service:
    build: ./product-service
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - DB_CONNECTION_URL=mongodb://product-db:27017/product-service
    volumes:
      - ./shared:/app/shared
    networks:
      - microservices-network
    depends_on:
      product-db:
        condition: service_healthy
      product-migrations:
        condition: service_completed_successfully
    command: ["node", "src/index.js"]

  product-db:
    image: mongo:5.0
    container_name: product-db
    ports:
      - "27019:27017"
    networks:
      - microservices-network
    volumes:
      - product-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-migrations:
    build: ./product-service
    entrypoint: ["/bin/sh", "-c", "npx migrate-mongo up || echo 'No new migrations to apply'"]
    depends_on:
      product-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: "no"

  # ---------------------------- ORDER SERVICE ----------------------------
  order-service:
    build: ./order-service
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - DB_CONNECTION_URL=mongodb://order-db:27017/order-service
    volumes:
      - ./shared:/app/shared
    networks:
      - microservices-network
    depends_on:
      order-db:
        condition: service_healthy
      order-migrations:
        condition: service_completed_successfully
    command: ["node", "src/index.js"]

  order-db:
    image: mongo:5.0
    container_name: order-db
    ports:
      - "27020:27017"
    networks:
      - microservices-network
    volumes:
      - order-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-migrations:
    build: ./order-service
    entrypoint: ["/bin/sh", "-c", "npx migrate-mongo up || echo 'No new migrations to apply'"]
    depends_on:
      order-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: "no"

  # ---------------------------- API GATEWAY ----------------------------
  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    volumes:
      - ./shared:/app/shared
    networks:
      - microservices-network
    depends_on:
      - redis
      - user-service
      - product-service
      - order-service

  # ---------------------------- REDIS ----------------------------
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    volumes:
      - redis-data:/data

# ---------------------------- NETWORK & VOLUMES ----------------------------
networks:
  microservices-network:
    driver: bridge

volumes:
  user-db-data:
  product-db-data:
  order-db-data:
  redis-data:
